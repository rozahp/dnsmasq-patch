diff --git a/dnsmasq-2.90/src/cache.c b/dnsmasq-2.90_custom_20240401/src/cache.c
index 0eacec9..b2fbf25 100644
--- a/dnsmasq-2.90/src/cache.c
+++ b/dnsmasq-2.90_custom_20240401/src/cache.c
@@ -1999,6 +1999,22 @@ char *record_source(unsigned int index)
   return "<unknown>";
 }
 
+// Added 2024-04-01 /Phazor
+// patch: function returns integer 1 if query type is unknown.
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type)
+{
+  unsigned int i;
+  for (i = 0; i < (sizeof(typestr)/sizeof(typestr[0])); i++)
+    if (typestr[i].type == type) 
+      {
+        return 0;
+      }
+  return 1;
+}
+// end of patch
+
+
 static char *querystr(char *desc, unsigned short type)
 {
   unsigned int i;
diff --git a/dnsmasq-2.90/src/config.h b/dnsmasq-2.90_custom_20240401/src/config.h
index e722e98..2293995 100644
--- a/dnsmasq-2.90/src/config.h
+++ b/dnsmasq-2.90_custom_20240401/src/config.h
@@ -35,7 +35,7 @@
 #define LOCALS_LOGGED 8 /* Only log this many local addresses when logging state */
 #define LEASE_RETRY 60 /* on error, retry writing leasefile after LEASE_RETRY seconds */
 #define CACHESIZ 150 /* default cache size */
-#define TTL_FLOOR_LIMIT 3600 /* don't allow --min-cache-ttl to raise TTL above this under any circumstances */
+#define TTL_FLOOR_LIMIT 604800 /* don't allow --min-cache-ttl to raise TTL above this under any circumstances */ //Changed 2024-04-01 /Phazor
 #define MAXLEASES 1000 /* maximum number of DHCP leases */
 #define PING_WAIT 3 /* wait for ping address-in-use test */
 #define PING_CACHE_TIME 30 /* Ping test assumed to be valid this long. */
@@ -43,7 +43,7 @@
 #define DHCP_PACKET_MAX 16384 /* hard limit on DHCP packet size */
 #define SMALLDNAME 50 /* most domain names are smaller than this */
 #define CNAME_CHAIN 10 /* chains longer than this atr dropped for loop protection */
-#define DNSSEC_MIN_TTL 60 /* DNSKEY and DS records in cache last at least this long */
+#define DNSSEC_MIN_TTL 3600 /* DNSKEY and DS records in cache last at least this long */ //Changed 202404-01 /Phazor
 #define HOSTSFILE "/etc/hosts"
 #define ETHERSFILE "/etc/ethers"
 #define DEFLEASE 3600 /* default DHCPv4 lease time, one hour */
@@ -147,8 +147,8 @@ HAVE_INOTIFY
 NO_ID
    Don't report *.bind CHAOS info to clients, forward such requests upstream instead.
 NO_TFTP
-NO_DHCP
-NO_DHCP6
+NO_DHCP */
+#define NO_DHCP6 /* Added 2024-04-01 /Phazor
 NO_SCRIPT
 NO_LARGEFILE
 NO_AUTH
@@ -180,13 +180,13 @@ RESOLVFILE
    has no library dependencies other than libc */
 
 #define HAVE_DHCP
-#define HAVE_DHCP6 
+/* #define HAVE_DHCP6  */ // Added 2024-04-01 /Phazor 
 #define HAVE_TFTP
 #define HAVE_SCRIPT
 #define HAVE_AUTH
 #define HAVE_IPSET 
 #define HAVE_LOOP
-#define HAVE_DUMPFILE
+/* #define HAVE_DUMPFILE */ // Added 2024-04-01 /Phazor
 
 /* Build options which require external libraries.
    
@@ -199,9 +199,9 @@ RESOLVFILE
 /* #define HAVE_DBUS */
 /* #define HAVE_IDN */
 /* #define HAVE_LIBIDN2 */
-/* #define HAVE_CONNTRACK */
+#define HAVE_CONNTRACK // Added 2024-04-01 /Phazor
 /* #define HAVE_CRYPTOHASH */
-/* #define HAVE_DNSSEC */
+#define HAVE_DNSSEC // Added 2024-04-01 /Phazor
 /* #define HAVE_NFTSET */
 
 /* Default locations for important system files. */
diff --git a/dnsmasq-2.90/src/dns-protocol.h b/dnsmasq-2.90_custom_20240401/src/dns-protocol.h
index 2777be9..e54dcfb 100644
--- a/dnsmasq-2.90/src/dns-protocol.h
+++ b/dnsmasq-2.90_custom_20240401/src/dns-protocol.h
@@ -71,6 +71,8 @@
 #define T_NSEC          47
 #define T_DNSKEY        48
 #define T_NSEC3         50
+#define T_SVCB          64 // Added 2024-04-01 /Phazor
+#define T_HTTPS         65 // Added 2024-04-01 /Phazor
 #define	T_TKEY		249		
 #define	T_TSIG		250
 #define T_AXFR          252
diff --git a/dnsmasq-2.90/src/dnsmasq.h b/dnsmasq-2.90_custom_20240401/src/dnsmasq.h
index e455c3f..2a707f6 100644
--- a/dnsmasq-2.90/src/dnsmasq.h
+++ b/dnsmasq-2.90_custom_20240401/src/dnsmasq.h
@@ -282,7 +282,11 @@ struct event_desc {
 #define OPT_NO_IDENT       70
 #define OPT_CACHE_RR       71
 #define OPT_LOCALHOST_SERVICE  72
-#define OPT_LAST           73
+#define OPT_FILTER_AAAA    73  // Added 2024-04-01 /Phazor
+#define OPT_FILTER_HTTPS   74  // Added 2024-04-01 /Phazor
+#define OPT_FILTER_SVCB    75  // Added 2024-04-01 /Phazor
+#define OPT_FILTER_UNKNOWN 76  // Added 2024-04-01 /Phazor
+#define OPT_LAST           77  // Added 2024-04-01 /Phazor
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
@@ -1339,6 +1343,11 @@ unsigned short rrtype(char *in);
 void next_uid(struct crec *crecp);
 void log_query(unsigned int flags, char *name, union all_addr *addr, char *arg, unsigned short type); 
 char *record_source(unsigned int index);
+// Added 2024-04-01 /Phazor
+// patch: function returns integer 1 if query type is unknown
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type);
+// end of patch
 int cache_find_non_terminal(char *name, time_t now);
 struct crec *cache_find_by_addr(struct crec *crecp,
 				union all_addr *addr, time_t now, 
diff --git a/dnsmasq-2.90/src/option.c b/dnsmasq-2.90_custom_20240401/src/option.c
index f4ff7c0..5356fa3 100644
--- a/dnsmasq-2.90/src/option.c
+++ b/dnsmasq-2.90_custom_20240401/src/option.c
@@ -192,6 +192,9 @@ struct myoption {
 #define LOPT_NO_DHCP4      383
 #define LOPT_MAX_PROCS     384
 #define LOPT_DNSSEC_LIMITS 385
+#define LOPT_FILTER_HTTPS  386
+#define LOPT_FILTER_SVCB   387
+#define LOPT_FILTER_UNKNOWN 388
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -388,6 +391,10 @@ static const struct myoption opts[] =
     { "use-stale-cache", 2, 0 , LOPT_STALE_CACHE },
     { "no-ident", 0, 0, LOPT_NO_IDENT },
     { "max-tcp-connections", 1, 0, LOPT_MAX_PROCS },
+    { "filter-aaaa", 0, 0, LOPT_FILTER_AAAA },  // Added 2024-04-01 /Phazor
+    { "filter-https", 0, 0, LOPT_FILTER_HTTPS }, // Added 2024-04-01 /Phazor
+    { "filter-svcb", 0, 0, LOPT_FILTER_SVCB }, // Added 2024-04-01 /Phazor
+    { "filter-unknown", 0, 0, LOPT_FILTER_UNKNOWN }, // Added 2024-04-01 /Phazor
     { NULL, 0, 0, 0 }
   };
 
@@ -591,6 +598,10 @@ static struct {
   { LOPT_NO_IDENT, OPT_NO_IDENT, NULL, gettext_noop("Do not add CHAOS TXT records."), NULL },
   { LOPT_CACHE_RR, ARG_DUP, "<RR-type>", gettext_noop("Cache this DNS resource record type."), NULL },
   { LOPT_MAX_PROCS, ARG_ONE, "<integer>", gettext_noop("Maximum number of concurrent tcp connections."), NULL },
+  { LOPT_FILTER_AAAA, OPT_FILTER_AAAA, NULL, gettext_noop("Filter all AAAA requests."), NULL },  // Added 2024-04-01 /Phazor
+  { LOPT_FILTER_SVCB, OPT_FILTER_SVCB, NULL, gettext_noop("Filter all SVCB/query type 64 requests."), NULL }, // Added 2024-04-01 /Phazor
+  { LOPT_FILTER_HTTPS, OPT_FILTER_HTTPS, NULL, gettext_noop("Filter all HTTPS/query type 65 requests."), NULL }, // Added 2024-04-01 /Phazor
+  { LOPT_FILTER_UNKNOWN, OPT_FILTER_UNKNOWN, NULL, gettext_noop("Filter all unknown query types (known are defined in cache.c)."), NULL }, // Added 2024-04-01 /Phazor
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -3510,7 +3521,9 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
     case LOPT_CACHE_RR: /* --cache-rr */
     case LOPT_FILTER_RR: /* --filter-rr */
     case LOPT_FILTER_A: /* --filter-A */
-    case LOPT_FILTER_AAAA: /* --filter-AAAA */
+    case LOPT_FILTER_AAAA: /* --filter-AAAA/aaaa */ // Changed 2024-04-01 /Phazor
+    case LOPT_FILTER_SVCB: /* --filter-svcb */ // Added 2024-04-01 /Phazor
+    case LOPT_FILTER_HTTPS: /* --filter-https */ // Added 2024-04-01 /Phazor
       while (1) {
 	int type;
 	struct rrlist *new;
@@ -3521,6 +3534,10 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	  type = T_A;
 	else if (option == LOPT_FILTER_AAAA)
 	  type = T_AAAA;
+        else if (option == LOPT_FILTER_SVCB)  // Added 2024-04-01 /Phazor
+          type = T_SVCB;                      // Added 2024-04-01 /Phazor
+        else if (option == LOPT_FILTER_HTTPS)  // Added 2024-04-01 /Phazor
+          type = T_HTTPS;                      // Added 2024-04-01 /Phazor
 	else
 	  {
 	    comma = split(arg);
diff --git a/dnsmasq-2.90/src/rfc1035.c b/dnsmasq-2.90_custom_20240401/src/rfc1035.c
index 387d894..4ca37d0 100644
--- a/dnsmasq-2.90/src/rfc1035.c
+++ b/dnsmasq-2.90_custom_20240401/src/rfc1035.c
@@ -2150,6 +2150,41 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 	  log_query(F_CONFIG | F_NEG, name, &addr, NULL, 0);
 	}
       
+      // Added 2024-04-01 /Phazor for filtering AAAA
+        
+      if (qtype == T_AAAA && option_bool(OPT_FILTER_AAAA))
+        {
+          ans = 1;
+          sec_data = 0;
+          log_query(F_CONFIG | F_IPV6 | F_NEG, name, &addr, NULL, 0);
+          //break;
+        }
+      // Added 2024-04-01 /Phazor for filtering SVCB query type
+      if (qtype == T_SVCB && option_bool(OPT_FILTER_SVCB))
+        {
+          ans = 1;
+          sec_data = 0;
+          log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL, 0);
+          //break;
+        }
+         
+      // Added 2024-04-01 /Phazor for filtering HTTPS query type
+      if (qtype == T_HTTPS && option_bool(OPT_FILTER_HTTPS))
+        {
+          ans = 1;
+          sec_data = 0;
+          log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL, 0);
+          //break;
+        }
+      // Added 2024-04-01 /Phazor for filtering UNKNOWN query types
+      if (is_query_type_unknown(qtype) && option_bool(OPT_FILTER_UNKNOWN))
+        {
+          ans = 1;
+          sec_data = 0;
+          log_query(F_CONFIG | F_NEG, name, &addr, NULL, 0);
+          //break;
+        }
+      // End of patch 2024-04-01
       if (!ans)
 	{
 	  if ((crecp = cache_find_by_name(NULL, name, now, F_RR | F_NXDOMAIN)) &&
